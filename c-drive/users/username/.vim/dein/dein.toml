[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc'
merged = 0
hook_add = '''
  if dein#util#_is_windows()
    let s:vimproc_dll_basename = has('win64') ?
          \ 'vimproc_win64.dll' : 'vimproc_win32.dll'
  elseif dein#util#_is_cygwin()
    let s:vimproc_dll_basename = 'vimproc_cygwin.dll'
  elseif dein#util#_is_mac()
    let s:vimproc_dll_basename = 'vimproc_mac.so'
  elseif glob('/lib*/ld-linux*64.so.2', 1) != ''
    let s:vimproc_dll_basename = 'vimproc_linux64.so'
  elseif glob('/lib*/ld-linux*.so.2', 1) != ''
    let s:vimproc_dll_basename = 'vimproc_linux32.so'
  elseif system('uname -s') =~? '^.\+BSD\n$'
    let s:vimproc_dll_basename = system(
          \ 'uname -sm | tr "[:upper:]" "[:lower:]"'
          \ .' | sed -e "s/ /_/" | xargs -I "{}" echo "vimproc_{}.so"')[0 : -2]
  else
    let s:vimproc_dll_basename = 'vimproc_unix.so'
  endif

  let s:vimproc_dll = get(g:, 'vimproc#dll_path', dein#get('vimproc').path . '/lib/'. s:vimproc_dll_basename)

  if !filereadable(s:vimproc_dll)
    call dein#call_hook('post_update')
    call dein#build('vimproc')
  endif
'''
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
    if $MSYSTEM == "MINGW32" || $MSYSTEM == "MINGW64"
      let cmd = "MSYSTEM=MSYS bash --login -c 'cd " . g:dein#plugin.path . ";" . cmd . "'"
    endif
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
depends = ['Shougo/vimproc.vim']
hook_add = '''
    let g:quickrun_config = {
        \ "_": {"runner": "vimproc"},
        \ }
inoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''

[[plugins]]
repo = 'Shougo/vimshell'

[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'Shougo/neocomplcache'

[[plugins]]
repo = 'cohama/agit.vim'

[[plugins]]
repo = 'idanarye/vim-merginal'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
let g:ctrlp_use_migemo = 1 " Don't install migemo yet
let g:ctrlp_clear_cache_on_exit = 0   " Doesn't cache clear when vim quit
let g:ctrlp_mruf_max            = 500 " Max memorable mru
let g:ctrlp_open_new_file       = 1   " Open new file as tab
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ }
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'scrooloose/nerdtree'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'altercation/vim-colors-solarized'

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_i = 1

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source = 'source ~/.vim/dein/neosnippet.rc.vim'

[[plugins]]
repo = 'Shougo/neocomplete.vim'
depends = 'context_filetype.vim'
if = "has('lua')"
on_event = 'InsertEnter'
hook_source = '''
  let g:neocomplete#enable_at_startup = 1
  source ~/.vim/dein/neocomplete.rc.vim
'''

[[plugins]]
repo = 'szw/vim-tags'
hook_add = '''
autocmd BufNewFile,BufRead *.js let g:vim_tags_project_tags_command = "ctags --languages=javascript -f ~/.tags/js.tags `pwd` 2>/dev/null &"
autocmd BufNewFile,BufRead *.ts let g:vim_tags_project_tags_command = "ctags --languages=typescript -f ~/.tags/ts.tags `pwd` 2>/dev/null &"
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_folding_level = 100
let perl_fold=1
set foldmethod=syntax
set foldlevel=100
set nofoldenable
'''

[[plugins]]
repo = 'kannokanno/previm'
hook_add = '''
let g:previm_open_cmd = ''
let g:previm_enable_realtime = 1
let g:previm_disable_default_css = 1
let g:previm_show_header = 0
autocmd Filetype markdown nnoremap <silent> <F5> :PrevimOpen<CR>
'''

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'neomake/neomake'
on_path = ['*.js', '*.ts']
hook_add = '''
autocmd BufWritePost,VimEnter *.js Neomake
autocmd BufWritePost,VimEnter *.ts Neomake
let g:neomake_javascript_enabled_makers = ['eslint', 'semistandard']
let g:neomake_typescript_enabled_makers = ['tsc', 'tslint']
'''

[[plugins]]
repo = 'benjie/neomake-local-eslint.vim'
on_path = '*.js'
hook_add = '''
let g:neomake_error_sign = {'text': '>>', 'texthl': 'Error'}
let g:neomake_warning_sign = {'text': '>>',  'texthl': 'Todo'}
'''

[[plugins]]
repo = 'scrooloose/syntastic'
hook_add = '''
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': ['ruby'] }
let g:syntastic_ruby_checkers = ['rubocop']
set autoread
'''

[[plugins]]
repo = 'marijnh/tern_for_vim'
depends = ['typescript-vim']
build = 'npm install'
on_ft = ['javascript', 'typescript']
hook_source = '''
call tern#Enable()
'''

[[plugins]]
repo = 'leafgarland/typescript-vim'

[[plugins]]
repo = 'vim-scripts/buftabs'
hook_add = '''
let g:buftabs_only_basename = 1
let g:buftabs_in_statusline = 1
let g:buftabs_active_highlight_group="Visual"
'''

[[plugins]]
repo = 'rking/ag.vim'
hook_add = '''
if executable('ag')
    let g:ctrlp_use_caching = 0
    let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup -g ""'
endif
'''

[[plugins]]
repo = 'junegunn/vim-easy-align.git'
hook_add = '''
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = "aklt/plantuml-syntax"

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_enable_on_vim_startup=0
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'xml']

[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['css', 'scss', 'sass']

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = ['javascrpt']

[[plugins]]
repo = 'ichizok/vim-js-indent.git'
on_ft = ['javascrpt', 'html']

[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html']
